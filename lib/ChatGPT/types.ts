import {
  ChatCompletionRequestMessage,
  CreateChatCompletionRequest,
  CreateChatCompletionResponse,
} from 'openai';

export type Role = 'user' | 'assistant' | 'system';

export interface ChatMessage {
  id: string; // message id, either provided by frontend, randomly generated by backend, or returned from OpenAI API
  content: string; // message from OpenAI API
  role: Role;
  openAiResponse?: CreateChatCompletionResponse; // the raw response JSON from the OpenAI API request
  parentMessageId?: string; // message id to the previous message
  conversationId?: string; // not in use
}

export type MessageInputOptions = {
  parentMessageId?: string;
  systemMessage?: string;
  prefixPrompt?: string;
  forget?: boolean;
  openaiParams?: Partial<Omit<CreateChatCompletionRequest, 'messages' | 'n'>>;
  // user & conversation management
  userId?: string;
  conversationId?: string;
};

// User-facing API input
export type MessageInput = {
  message: string;
  options: MessageInputOptions;
};

export type MessageOutputDetails = {
  openAiResponse?: CreateChatCompletionResponse; // the raw response JSON from the OpenAI API request
  history?: ChatCompletionRequestMessage[]; // previous messages in this conversation, except the latest response
  id?: string; // id of this message, to be used as the parentMessageId in the next request
  // user & conversation management
  userId?: string;
  conversationId?: string;
};

// User-facing API output
export type MessageOutput = {
  reply: string;
  details?: MessageOutputDetails;
};

/** Returns a chat message from a store by it's ID (or null if not found). */
export type GetMessageByIdFunction = (
  id: string
) => Promise<ChatMessage | undefined>;

/** Upserts a chat message to a store. */
export type UpsertMessageFunction = (message: ChatMessage) => Promise<void>;
